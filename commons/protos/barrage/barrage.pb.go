// Code generated by protoc-gen-go.
// source: barrage/barrage.proto
// DO NOT EDIT!

/*
Package barrage is a generated protocol buffer package.

It is generated from these files:
	barrage/barrage.proto

It has these top-level messages:
	Broadcast
	Content
	Barrages
	Status
*/
package barrage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Broadcast struct {
	BroadcastID string `protobuf:"bytes,1,opt,name=broadcastID" json:"broadcastID,omitempty"`
	StartTime   int64  `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
	Num         int32  `protobuf:"varint,4,opt,name=num" json:"num,omitempty"`
	Size        int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
}

func (m *Broadcast) Reset()                    { *m = Broadcast{} }
func (m *Broadcast) String() string            { return proto.CompactTextString(m) }
func (*Broadcast) ProtoMessage()               {}
func (*Broadcast) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Content struct {
	TypeID      int32  `protobuf:"varint,1,opt,name=typeID" json:"typeID,omitempty"`
	BroadcastID string `protobuf:"bytes,2,opt,name=broadcastID" json:"broadcastID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
	Text        string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	CreatedAt   int64  `protobuf:"varint,5,opt,name=createdAt" json:"createdAt,omitempty"`
	Username    string `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	Level       int64  `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Barrages struct {
	List []*Content `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *Barrages) Reset()                    { *m = Barrages{} }
func (m *Barrages) String() string            { return proto.CompactTextString(m) }
func (*Barrages) ProtoMessage()               {}
func (*Barrages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Barrages) GetList() []*Content {
	if m != nil {
		return m.List
	}
	return nil
}

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Broadcast)(nil), "barrage.Broadcast")
	proto.RegisterType((*Content)(nil), "barrage.Content")
	proto.RegisterType((*Barrages)(nil), "barrage.Barrages")
	proto.RegisterType((*Status)(nil), "barrage.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Barrage service

type BarrageClient interface {
	Send(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Status, error)
	List(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Barrages, error)
}

type barrageClient struct {
	cc *grpc.ClientConn
}

func NewBarrageClient(cc *grpc.ClientConn) BarrageClient {
	return &barrageClient{cc}
}

func (c *barrageClient) Send(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/barrage.Barrage/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barrageClient) List(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Barrages, error) {
	out := new(Barrages)
	err := grpc.Invoke(ctx, "/barrage.Barrage/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Barrage service

type BarrageServer interface {
	Send(context.Context, *Content) (*Status, error)
	List(context.Context, *Broadcast) (*Barrages, error)
}

func RegisterBarrageServer(s *grpc.Server, srv BarrageServer) {
	s.RegisterService(&_Barrage_serviceDesc, srv)
}

func _Barrage_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarrageServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barrage.Barrage/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarrageServer).Send(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _Barrage_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Broadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarrageServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barrage.Barrage/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarrageServer).List(ctx, req.(*Broadcast))
	}
	return interceptor(ctx, in, info, handler)
}

var _Barrage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "barrage.Barrage",
	HandlerType: (*BarrageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Barrage_Send_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Barrage_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("barrage/barrage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x6a, 0xea, 0x40,
	0x10, 0xc6, 0x8d, 0xf9, 0x67, 0xc6, 0x8b, 0xe3, 0x19, 0xce, 0x91, 0x45, 0x7a, 0x11, 0x42, 0x2f,
	0x02, 0x05, 0x2d, 0xf6, 0x09, 0x6a, 0xbd, 0x11, 0x7a, 0xb5, 0xf6, 0x05, 0xd6, 0x64, 0x90, 0x80,
	0x26, 0x92, 0x9d, 0x94, 0xb6, 0xaf, 0xd0, 0x87, 0xea, 0xab, 0x95, 0xac, 0x9b, 0x58, 0xea, 0x55,
	0xe6, 0xf7, 0x7d, 0xcc, 0xe4, 0x9b, 0xdd, 0x85, 0xff, 0x3b, 0x55, 0xd7, 0x6a, 0x4f, 0x0b, 0xfb,
	0x9d, 0x9f, 0xea, 0x8a, 0x2b, 0x0c, 0x2d, 0x26, 0x9f, 0x0e, 0x44, 0xab, 0xba, 0x52, 0x79, 0xa6,
	0x34, 0x63, 0x0c, 0xe3, 0x5d, 0x07, 0x9b, 0xb5, 0x70, 0x62, 0x27, 0x8d, 0xe4, 0x4f, 0x09, 0x6f,
	0x20, 0xd2, 0xac, 0x6a, 0x7e, 0x29, 0x8e, 0x24, 0x86, 0xb1, 0x93, 0xba, 0xf2, 0x22, 0xa0, 0x80,
	0x90, 0xca, 0xdc, 0x78, 0xae, 0xf1, 0x3a, 0xc4, 0x09, 0xb8, 0x65, 0x73, 0x14, 0x5e, 0xec, 0xa4,
	0xbe, 0x6c, 0x4b, 0x44, 0xf0, 0x74, 0xf1, 0x41, 0xc2, 0x37, 0x92, 0xa9, 0x93, 0x2f, 0x07, 0xc2,
	0xa7, 0xaa, 0x64, 0x2a, 0x19, 0xa7, 0x10, 0xf0, 0xfb, 0x89, 0x6c, 0x0c, 0x5f, 0x5a, 0xfa, 0x9d,
	0x71, 0x78, 0x9d, 0x71, 0x0a, 0x41, 0xa3, 0xa9, 0xde, 0xac, 0x4d, 0x88, 0x48, 0x5a, 0x6a, 0xff,
	0xc8, 0xf4, 0xc6, 0x26, 0x44, 0x24, 0x4d, 0xdd, 0xee, 0x93, 0xd5, 0xa4, 0x98, 0xf2, 0x47, 0x36,
	0x51, 0x5c, 0x79, 0x11, 0x70, 0x06, 0xa3, 0xb6, 0xb7, 0x54, 0x47, 0x12, 0x81, 0xe9, 0xea, 0x19,
	0xff, 0x81, 0x7f, 0xa0, 0x57, 0x3a, 0x88, 0xd0, 0x74, 0x9d, 0x21, 0xb9, 0x87, 0xd1, 0xea, 0x7c,
	0xb4, 0x1a, 0x6f, 0xc1, 0x3b, 0x14, 0x9a, 0x85, 0x13, 0xbb, 0xe9, 0x78, 0x39, 0x99, 0x77, 0x57,
	0x60, 0x37, 0x94, 0xc6, 0x4d, 0x12, 0x08, 0xb6, 0xac, 0xb8, 0xd1, 0xed, 0xe9, 0xe9, 0x26, 0xcb,
	0x48, 0x6b, 0xb3, 0xf2, 0x48, 0x76, 0xb8, 0xdc, 0x43, 0x68, 0xa7, 0xe2, 0x1d, 0x78, 0x5b, 0x2a,
	0x73, 0xbc, 0x1a, 0x37, 0xfb, 0xd3, 0x2b, 0xe7, 0x79, 0xc9, 0x00, 0x17, 0xe0, 0x3d, 0x17, 0x9a,
	0x11, 0x7b, 0xab, 0xbf, 0xeb, 0xd9, 0xdf, 0x8b, 0x66, 0x03, 0x27, 0x83, 0x5d, 0x60, 0x9e, 0xc7,
	0xc3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xdd, 0x71, 0xd9, 0x37, 0x02, 0x00, 0x00,
}

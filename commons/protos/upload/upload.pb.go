// Code generated by protoc-gen-go.
// source: upload/upload.proto
// DO NOT EDIT!

/*
Package upload is a generated protocol buffer package.

It is generated from these files:
	upload/upload.proto

It has these top-level messages:
	File
	Status
*/
package upload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type File struct {
	FileName string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*File)(nil), "upload.File")
	proto.RegisterType((*Status)(nil), "upload.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Upload service

type UploadClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Upload_SendClient, error)
}

type uploadClient struct {
	cc *grpc.ClientConn
}

func NewUploadClient(cc *grpc.ClientConn) UploadClient {
	return &uploadClient{cc}
}

func (c *uploadClient) Send(ctx context.Context, opts ...grpc.CallOption) (Upload_SendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Upload_serviceDesc.Streams[0], c.cc, "/upload.Upload/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadSendClient{stream}
	return x, nil
}

type Upload_SendClient interface {
	Send(*File) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type uploadSendClient struct {
	grpc.ClientStream
}

func (x *uploadSendClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadSendClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Upload service

type UploadServer interface {
	Send(Upload_SendServer) error
}

func RegisterUploadServer(s *grpc.Server, srv UploadServer) {
	s.RegisterService(&_Upload_serviceDesc, srv)
}

func _Upload_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServer).Send(&uploadSendServer{stream})
}

type Upload_SendServer interface {
	SendAndClose(*Status) error
	Recv() (*File, error)
	grpc.ServerStream
}

type uploadSendServer struct {
	grpc.ServerStream
}

func (x *uploadSendServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadSendServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Upload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upload.Upload",
	HandlerType: (*UploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Upload_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("upload/upload.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2d, 0xc8, 0xc9,
	0x4f, 0x4c, 0xd1, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x92,
	0x0d, 0x17, 0x8b, 0x5b, 0x66, 0x4e, 0xaa, 0x90, 0x14, 0x17, 0x47, 0x5a, 0x66, 0x4e, 0xaa, 0x5f,
	0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0x24, 0xc1, 0xc5, 0x9e,
	0x9c, 0x9f, 0x57, 0x92, 0x9a, 0x57, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0x2a,
	0x29, 0x71, 0xb1, 0x05, 0x97, 0x24, 0x96, 0x94, 0x16, 0x83, 0xd4, 0x14, 0x97, 0x26, 0x27, 0xa7,
	0x16, 0x17, 0x83, 0xb5, 0x73, 0x04, 0xc1, 0xb8, 0x46, 0x46, 0x5c, 0x6c, 0xa1, 0x60, 0xbb, 0x84,
	0x34, 0xb8, 0x58, 0x82, 0x53, 0xf3, 0x52, 0x84, 0x78, 0xf4, 0xa0, 0x4e, 0x01, 0xd9, 0x2c, 0xc5,
	0x07, 0xe3, 0x41, 0x4c, 0x52, 0x62, 0xd0, 0x60, 0x4c, 0x62, 0x03, 0x3b, 0xd2, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x6f, 0xa8, 0xea, 0x8f, 0xbb, 0x00, 0x00, 0x00,
}

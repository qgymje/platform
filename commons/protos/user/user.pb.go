// Code generated by protoc-gen-go.
// source: user/user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	Phone
	Email
	Code
	UserID
	Status
	Token
	LoginInfo
	RegisterInfo
	UserQuery
	UserInfo
	UsersInfo
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Phone struct {
	Country string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Phone   string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
}

func (m *Phone) Reset()                    { *m = Phone{} }
func (m *Phone) String() string            { return proto.CompactTextString(m) }
func (*Phone) ProtoMessage()               {}
func (*Phone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Email struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Code struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *Code) Reset()                    { *m = Code{} }
func (m *Code) String() string            { return proto.CompactTextString(m) }
func (*Code) ProtoMessage()               {}
func (*Code) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UserID struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *UserID) Reset()                    { *m = UserID{} }
func (m *UserID) String() string            { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()               {}
func (*UserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type LoginInfo struct {
	Account  string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginInfo) Reset()                    { *m = LoginInfo{} }
func (m *LoginInfo) String() string            { return proto.CompactTextString(m) }
func (*LoginInfo) ProtoMessage()               {}
func (*LoginInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RegisterInfo struct {
	Account         string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	PasswordConfirm string `protobuf:"bytes,3,opt,name=passwordConfirm" json:"passwordConfirm,omitempty"`
	Nickname        string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
}

func (m *RegisterInfo) Reset()                    { *m = RegisterInfo{} }
func (m *RegisterInfo) String() string            { return proto.CompactTextString(m) }
func (*RegisterInfo) ProtoMessage()               {}
func (*RegisterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UserQuery struct {
	Num    int32    `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Size   int32    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Search string   `protobuf:"bytes,3,opt,name=search" json:"search,omitempty"`
	IDs    []string `protobuf:"bytes,4,rep,name=IDs,json=iDs" json:"IDs,omitempty"`
}

func (m *UserQuery) Reset()                    { *m = UserQuery{} }
func (m *UserQuery) String() string            { return proto.CompactTextString(m) }
func (*UserQuery) ProtoMessage()               {}
func (*UserQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type UserInfo struct {
	UserID     string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Nickname   string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	Token      string `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
	Avatar     string `protobuf:"bytes,6,opt,name=avatar" json:"avatar,omitempty"`
	Level      int64  `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	FollowNum  int64  `protobuf:"varint,8,opt,name=followNum" json:"followNum,omitempty"`
	Popularity int64  `protobuf:"varint,9,opt,name=popularity" json:"popularity,omitempty"`
	CreatedAt  int64  `protobuf:"varint,10,opt,name=createdAt" json:"createdAt,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type UsersInfo struct {
	Users    []*UserInfo `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	TotalNum int64       `protobuf:"varint,2,opt,name=totalNum" json:"totalNum,omitempty"`
}

func (m *UsersInfo) Reset()                    { *m = UsersInfo{} }
func (m *UsersInfo) String() string            { return proto.CompactTextString(m) }
func (*UsersInfo) ProtoMessage()               {}
func (*UsersInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UsersInfo) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*Phone)(nil), "user.Phone")
	proto.RegisterType((*Email)(nil), "user.Email")
	proto.RegisterType((*Code)(nil), "user.Code")
	proto.RegisterType((*UserID)(nil), "user.UserID")
	proto.RegisterType((*Status)(nil), "user.Status")
	proto.RegisterType((*Token)(nil), "user.Token")
	proto.RegisterType((*LoginInfo)(nil), "user.LoginInfo")
	proto.RegisterType((*RegisterInfo)(nil), "user.RegisterInfo")
	proto.RegisterType((*UserQuery)(nil), "user.UserQuery")
	proto.RegisterType((*UserInfo)(nil), "user.UserInfo")
	proto.RegisterType((*UsersInfo)(nil), "user.UsersInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for User service

type UserClient interface {
	SMSCode(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*Code, error)
	EmailCode(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Code, error)
	Register(ctx context.Context, in *RegisterInfo, opts ...grpc.CallOption) (*UserInfo, error)
	Login(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*UserInfo, error)
	Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Status, error)
	Auth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserInfo, error)
	Info(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserInfo, error)
	List(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UsersInfo, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) SMSCode(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := grpc.Invoke(ctx, "/user.User/SMSCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EmailCode(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := grpc.Invoke(ctx, "/user.User/EmailCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/user.User/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/user.User/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/user.User/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Auth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/user.User/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Info(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/user.User/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) List(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UsersInfo, error) {
	out := new(UsersInfo)
	err := grpc.Invoke(ctx, "/user.User/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	SMSCode(context.Context, *Phone) (*Code, error)
	EmailCode(context.Context, *Email) (*Code, error)
	Register(context.Context, *RegisterInfo) (*UserInfo, error)
	Login(context.Context, *LoginInfo) (*UserInfo, error)
	Logout(context.Context, *Token) (*Status, error)
	Auth(context.Context, *Token) (*UserInfo, error)
	Info(context.Context, *UserID) (*UserInfo, error)
	List(context.Context, *UserQuery) (*UsersInfo, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_SMSCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Phone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SMSCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SMSCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SMSCode(ctx, req.(*Phone))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/EmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EmailCode(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Auth(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Info(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).List(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SMSCode",
			Handler:    _User_SMSCode_Handler,
		},
		{
			MethodName: "EmailCode",
			Handler:    _User_EmailCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _User_Auth_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _User_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _User_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x6e, 0xe2, 0x8f, 0xc6, 0xd3, 0xea, 0xcd, 0xab, 0x15, 0x42, 0x96, 0x05, 0x28, 0x5a, 0x95,
	0x2a, 0xe2, 0x50, 0x50, 0x39, 0x70, 0x8e, 0x1a, 0x0e, 0x91, 0x52, 0x04, 0x0e, 0x9c, 0x38, 0x2d,
	0xce, 0x26, 0xb1, 0xea, 0x78, 0xa3, 0xdd, 0x75, 0xab, 0xf0, 0x13, 0xfa, 0xfb, 0xf8, 0x41, 0x68,
	0x66, 0xed, 0xc4, 0x84, 0xc0, 0x81, 0x4b, 0x34, 0xcf, 0xcc, 0xb3, 0xe3, 0x67, 0xbe, 0x02, 0xfd,
	0xca, 0x48, 0xfd, 0x1a, 0x7f, 0xae, 0x36, 0x5a, 0x59, 0xc5, 0x7c, 0xb4, 0xf9, 0x3b, 0x08, 0x3e,
	0xae, 0x54, 0x29, 0x59, 0x0c, 0xa7, 0x99, 0xaa, 0x4a, 0xab, 0xb7, 0x71, 0x67, 0xd0, 0x19, 0x46,
	0x69, 0x03, 0xd9, 0x13, 0x08, 0x36, 0x48, 0x89, 0xbb, 0xe4, 0x77, 0x80, 0x3f, 0x87, 0xe0, 0xfd,
	0x5a, 0xe4, 0x05, 0x86, 0x25, 0x1a, 0xf5, 0x33, 0x07, 0x78, 0x02, 0xfe, 0x8d, 0x9a, 0x4b, 0xc6,
	0xc0, 0xcf, 0xd4, 0x5c, 0xd6, 0x41, 0xb2, 0xf9, 0x00, 0xc2, 0x2f, 0x46, 0xea, 0xc9, 0x98, 0x3d,
	0x85, 0xb0, 0x22, 0xab, 0x8e, 0xd7, 0x88, 0x73, 0x08, 0x67, 0x56, 0xd8, 0xca, 0xa0, 0x2c, 0x53,
	0x65, 0x99, 0x34, 0x86, 0x28, 0xbd, 0xb4, 0x81, 0x28, 0xe0, 0xb3, 0xba, 0x93, 0x25, 0x0a, 0xb0,
	0x68, 0x34, 0x02, 0x08, 0xf0, 0x11, 0x44, 0x53, 0xb5, 0xcc, 0xcb, 0x49, 0xb9, 0x50, 0x98, 0x45,
	0x64, 0x54, 0x4f, 0x53, 0x5c, 0x0d, 0x59, 0x02, 0xbd, 0x8d, 0x30, 0xe6, 0x41, 0xe9, 0x79, 0x5d,
	0xdf, 0x0e, 0xf3, 0xc7, 0x0e, 0x9c, 0xa7, 0x72, 0x99, 0x1b, 0x2b, 0xf5, 0xbf, 0xa7, 0x61, 0x43,
	0xe8, 0x37, 0xf6, 0x8d, 0x2a, 0x17, 0xb9, 0x5e, 0xc7, 0x1e, 0x51, 0x0e, 0xdd, 0x98, 0xa5, 0xcc,
	0xb3, 0xbb, 0x52, 0xac, 0x65, 0xec, 0xbb, 0x2c, 0x0d, 0xe6, 0x5f, 0x21, 0xc2, 0xa6, 0x7d, 0xaa,
	0xa4, 0xde, 0xb2, 0xff, 0xc1, 0x2b, 0xab, 0x35, 0x89, 0x08, 0x52, 0x34, 0xb1, 0xcf, 0x26, 0xff,
	0xee, 0x66, 0x14, 0xa4, 0x64, 0x63, 0x77, 0x8d, 0x14, 0x3a, 0x5b, 0xd5, 0xdf, 0xab, 0x11, 0xbe,
	0x9e, 0x8c, 0x4d, 0xec, 0x0f, 0xbc, 0x61, 0x94, 0x7a, 0xf9, 0xd8, 0xf0, 0xc7, 0x2e, 0xf4, 0x68,
	0x24, 0x58, 0xe5, 0x1f, 0x86, 0x72, 0x7c, 0x0f, 0xf6, 0xe3, 0xf7, 0x5a, 0xe3, 0xff, 0x5b, 0x25,
	0xfb, 0x79, 0x05, 0xad, 0x79, 0xe1, 0x57, 0xc5, 0xbd, 0xb0, 0x42, 0xc7, 0xa1, 0xfb, 0xaa, 0x43,
	0xc8, 0x2e, 0xe4, 0xbd, 0x2c, 0xe2, 0xd3, 0x41, 0x67, 0xe8, 0xa5, 0x0e, 0xb0, 0x67, 0x10, 0x2d,
	0x54, 0x51, 0xa8, 0x87, 0x0f, 0xd5, 0x3a, 0xee, 0x51, 0x64, 0xef, 0x60, 0x2f, 0x00, 0x36, 0x6a,
	0x53, 0x15, 0x42, 0xe7, 0x76, 0x1b, 0x47, 0x14, 0x6e, 0x79, 0xf0, 0x75, 0xa6, 0xa5, 0xb0, 0x72,
	0x3e, 0xb2, 0x31, 0xb8, 0xd7, 0x3b, 0x07, 0xbf, 0x75, 0x9d, 0x36, 0xd4, 0x8c, 0x0b, 0x08, 0xb0,
	0x7c, 0xdc, 0x3e, 0x6f, 0x78, 0x76, 0xfd, 0xdf, 0x15, 0x5d, 0x50, 0xd3, 0xab, 0xd4, 0x05, 0xb1,
	0x5c, 0xab, 0xac, 0x28, 0x50, 0x4d, 0x97, 0xf2, 0xed, 0xf0, 0xf5, 0x8f, 0x2e, 0xf8, 0xc8, 0x67,
	0x17, 0x70, 0x3a, 0xbb, 0x9d, 0xd1, 0x55, 0x9c, 0xb9, 0x34, 0x74, 0x79, 0x09, 0x38, 0x80, 0x01,
	0x7e, 0xc2, 0x2e, 0x21, 0xa2, 0xbb, 0x6a, 0xf3, 0xc8, 0x71, 0xc0, 0x7b, 0x03, 0xbd, 0x66, 0x37,
	0x19, 0x73, 0x91, 0xf6, 0xae, 0x26, 0x07, 0x4a, 0xf9, 0x09, 0x7b, 0x05, 0x01, 0x5d, 0x04, 0xeb,
	0xbb, 0xd0, 0xee, 0x3c, 0x8e, 0x70, 0x5f, 0x42, 0x38, 0x55, 0x4b, 0x55, 0xd9, 0x46, 0x02, 0x9d,
	0x5a, 0x72, 0xee, 0x80, 0xbb, 0x4d, 0xa2, 0xf9, 0xa3, 0xca, 0xae, 0x7e, 0x25, 0xfd, 0x9e, 0xed,
	0x12, 0x7c, 0x6a, 0xe6, 0x79, 0x2b, 0x32, 0x3e, 0xaa, 0xd0, 0x9f, 0xe6, 0xc6, 0x36, 0x02, 0x77,
	0xfb, 0x9e, 0xb4, 0x1c, 0xc6, 0x71, 0xbf, 0x85, 0xf4, 0x2f, 0xf6, 0xf6, 0x67, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x85, 0xc2, 0x0b, 0xe9, 0xd8, 0x04, 0x00, 0x00,
}

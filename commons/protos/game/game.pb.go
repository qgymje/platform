// Code generated by protoc-gen-go.
// source: game/game.proto
// DO NOT EDIT!

/*
Package game is a generated protocol buffer package.

It is generated from these files:
	game/game.proto

It has these top-level messages:
	Status
	PreferenceConfig
	UserID
	GameVM
	Games
	GameInfo
	Page
*/
package game

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PreferenceConfig struct {
	Json string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
}

func (m *PreferenceConfig) Reset()                    { *m = PreferenceConfig{} }
func (m *PreferenceConfig) String() string            { return proto.CompactTextString(m) }
func (*PreferenceConfig) ProtoMessage()               {}
func (*PreferenceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UserID struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *UserID) Reset()                    { *m = UserID{} }
func (m *UserID) String() string            { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()               {}
func (*UserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GameVM struct {
	IP string `protobuf:"bytes,1,opt,name=IP,json=iP" json:"IP,omitempty"`
}

func (m *GameVM) Reset()                    { *m = GameVM{} }
func (m *GameVM) String() string            { return proto.CompactTextString(m) }
func (*GameVM) ProtoMessage()               {}
func (*GameVM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Games struct {
	Games []*GameInfo `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (m *Games) Reset()                    { *m = Games{} }
func (m *Games) String() string            { return proto.CompactTextString(m) }
func (*Games) ProtoMessage()               {}
func (*Games) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Games) GetGames() []*GameInfo {
	if m != nil {
		return m.Games
	}
	return nil
}

type GameInfo struct {
	GameID string `protobuf:"bytes,1,opt,name=gameID" json:"gameID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Cover  string `protobuf:"bytes,3,opt,name=cover" json:"cover,omitempty"`
}

func (m *GameInfo) Reset()                    { *m = GameInfo{} }
func (m *GameInfo) String() string            { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()               {}
func (*GameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Page struct {
	Num  int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Size int32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*Status)(nil), "game.Status")
	proto.RegisterType((*PreferenceConfig)(nil), "game.PreferenceConfig")
	proto.RegisterType((*UserID)(nil), "game.UserID")
	proto.RegisterType((*GameVM)(nil), "game.GameVM")
	proto.RegisterType((*Games)(nil), "game.Games")
	proto.RegisterType((*GameInfo)(nil), "game.GameInfo")
	proto.RegisterType((*Page)(nil), "game.Page")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Game service

type GameClient interface {
	Start(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*GameVM, error)
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Games, error)
	Preference(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PreferenceConfig, error)
	UpdatePreference(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Status, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Start(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*GameVM, error) {
	out := new(GameVM)
	err := grpc.Invoke(ctx, "/game.Game/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Games, error) {
	out := new(Games)
	err := grpc.Invoke(ctx, "/game.Game/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Preference(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PreferenceConfig, error) {
	out := new(PreferenceConfig)
	err := grpc.Invoke(ctx, "/game.Game/Preference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) UpdatePreference(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/game.Game/UpdatePreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Game service

type GameServer interface {
	Start(context.Context, *UserID) (*GameVM, error)
	List(context.Context, *Page) (*Games, error)
	Preference(context.Context, *UserID) (*PreferenceConfig, error)
	UpdatePreference(context.Context, *UserID) (*Status, error)
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Start(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Preference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Preference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/Preference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Preference(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_UpdatePreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).UpdatePreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Game/UpdatePreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).UpdatePreference(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "game.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Game_Start_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Game_List_Handler,
		},
		{
			MethodName: "Preference",
			Handler:    _Game_Preference_Handler,
		},
		{
			MethodName: "UpdatePreference",
			Handler:    _Game_UpdatePreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("game/game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0x51, 0x6b, 0xf2, 0x40,
	0x10, 0x8c, 0x9a, 0xe4, 0xf3, 0x5b, 0xc5, 0xca, 0x52, 0x24, 0xf8, 0x64, 0x8f, 0xb6, 0xf8, 0xd0,
	0xda, 0x62, 0xfb, 0x0f, 0x5a, 0x28, 0x82, 0x42, 0x88, 0xe8, 0xfb, 0x35, 0x5d, 0x43, 0x0a, 0x49,
	0xe4, 0xee, 0xd2, 0x87, 0xfe, 0xb2, 0xfe, 0xbc, 0xb2, 0x77, 0x91, 0x80, 0xd0, 0x97, 0x30, 0xb3,
	0x73, 0x37, 0x33, 0xb9, 0x85, 0x8b, 0x4c, 0x16, 0xf4, 0xc0, 0x9f, 0xc5, 0x51, 0x55, 0xa6, 0x42,
	0x9f, 0xb1, 0x10, 0x10, 0x6e, 0x8d, 0x34, 0xb5, 0xc6, 0x08, 0xfe, 0xe9, 0x3a, 0x4d, 0x49, 0xeb,
	0xa8, 0x33, 0xeb, 0xcc, 0xfb, 0xc9, 0x89, 0x8a, 0x5b, 0x18, 0xc7, 0x8a, 0x0e, 0xa4, 0xa8, 0x4c,
	0xe9, 0xa5, 0x2a, 0x0f, 0x79, 0x86, 0x08, 0xfe, 0xa7, 0xae, 0x4a, 0x7b, 0xf4, 0x7f, 0x62, 0xb1,
	0x98, 0x41, 0xb8, 0xd3, 0xa4, 0x56, 0xaf, 0x38, 0x81, 0xb0, 0xb6, 0xa8, 0xd1, 0x1b, 0x26, 0x22,
	0x08, 0xdf, 0x64, 0x41, 0xfb, 0x0d, 0x8e, 0xa0, 0xbb, 0x8a, 0x1b, 0xb5, 0x9b, 0xc7, 0xe2, 0x1e,
	0x02, 0x56, 0x34, 0x5e, 0x43, 0xc0, 0xc5, 0xb8, 0x44, 0x6f, 0x3e, 0x58, 0x8e, 0x16, 0xb6, 0x32,
	0x6b, 0xab, 0xf2, 0x50, 0x25, 0x4e, 0x14, 0x6b, 0xe8, 0x9f, 0x46, 0x1c, 0xc6, 0xc3, 0x36, 0xcc,
	0x31, 0xae, 0x58, 0xca, 0x82, 0xa2, 0xae, 0xab, 0xc8, 0x18, 0x2f, 0x21, 0x48, 0xab, 0x2f, 0x52,
	0x51, 0xcf, 0x0e, 0x1d, 0x11, 0x77, 0xe0, 0xc7, 0x32, 0x23, 0x1c, 0x43, 0xaf, 0xac, 0x0b, 0x6b,
	0x13, 0x24, 0x0c, 0xd9, 0x43, 0xe7, 0xdf, 0xce, 0x23, 0x48, 0x2c, 0x5e, 0xfe, 0x74, 0xc0, 0xe7,
	0x70, 0xbc, 0x81, 0x60, 0x6b, 0xa4, 0x32, 0x38, 0x74, 0x25, 0xdd, 0xcf, 0x4f, 0x87, 0x6d, 0xe5,
	0xfd, 0x46, 0x78, 0x78, 0x05, 0xfe, 0x3a, 0xd7, 0x06, 0xc1, 0xcd, 0x39, 0x69, 0x3a, 0x68, 0xcf,
	0x68, 0xe1, 0xe1, 0x33, 0x40, 0xfb, 0xc2, 0x67, 0x76, 0x93, 0xe6, 0xda, 0xd9, 0x06, 0x84, 0x87,
	0x8f, 0x30, 0xde, 0x1d, 0x3f, 0xa4, 0xa1, 0x3f, 0xef, 0x36, 0xcc, 0x6d, 0x58, 0x78, 0xef, 0xa1,
	0x5d, 0xfd, 0xd3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x75, 0x77, 0x51, 0x0d, 0x02, 0x00,
	0x00,
}

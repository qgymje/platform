// Code generated by protoc-gen-go.
// source: chat/chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat/chat.proto

It has these top-level messages:
	Creator
	ChatInfo
	ChatList
	Page
	SendMessage
	Status
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Creator struct {
	UserID  string   `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Name    string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Creator) Reset()                    { *m = Creator{} }
func (m *Creator) String() string            { return proto.CompactTextString(m) }
func (*Creator) ProtoMessage()               {}
func (*Creator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChatInfo struct {
	UserID  string   `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Members []string `protobuf:"bytes,3,rep,name=members" json:"members,omitempty"`
}

func (m *ChatInfo) Reset()                    { *m = ChatInfo{} }
func (m *ChatInfo) String() string            { return proto.CompactTextString(m) }
func (*ChatInfo) ProtoMessage()               {}
func (*ChatInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ChatList struct {
	List []*ChatInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ChatList) Reset()                    { *m = ChatList{} }
func (m *ChatList) String() string            { return proto.CompactTextString(m) }
func (*ChatList) ProtoMessage()               {}
func (*ChatList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChatList) GetList() []*ChatInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type Page struct {
	Num    int32  `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Size   int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	UserID string `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SendMessage struct {
	ChatID  string `protobuf:"bytes,1,opt,name=chatID" json:"chatID,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (m *SendMessage) Reset()                    { *m = SendMessage{} }
func (m *SendMessage) String() string            { return proto.CompactTextString(m) }
func (*SendMessage) ProtoMessage()               {}
func (*SendMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Status struct {
	Success   bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ChatID    string `protobuf:"bytes,2,opt,name=chatID" json:"chatID,omitempty"`
	MessageID string `protobuf:"bytes,3,opt,name=MessageID" json:"MessageID,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Creator)(nil), "chat.Creator")
	proto.RegisterType((*ChatInfo)(nil), "chat.ChatInfo")
	proto.RegisterType((*ChatList)(nil), "chat.ChatList")
	proto.RegisterType((*Page)(nil), "chat.Page")
	proto.RegisterType((*SendMessage)(nil), "chat.SendMessage")
	proto.RegisterType((*Status)(nil), "chat.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Chat service

type ChatClient interface {
	Create(ctx context.Context, in *Creator, opts ...grpc.CallOption) (*Status, error)
	Send(ctx context.Context, in *SendMessage, opts ...grpc.CallOption) (*Status, error)
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*ChatList, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Create(ctx context.Context, in *Creator, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/chat.Chat/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Send(ctx context.Context, in *SendMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/chat.Chat/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*ChatList, error) {
	out := new(ChatList)
	err := grpc.Invoke(ctx, "/chat.Chat/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	Create(context.Context, *Creator) (*Status, error)
	Send(context.Context, *SendMessage) (*Status, error)
	List(context.Context, *Page) (*ChatList, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Creator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Create(ctx, req.(*Creator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Send(ctx, req.(*SendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Chat_Create_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Chat_Send_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Chat_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("chat/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x3d, 0x4f, 0xf3, 0x30,
	0x10, 0xc7, 0x9b, 0xd8, 0x4d, 0x9b, 0xeb, 0xf3, 0xf0, 0xe2, 0xa1, 0x8a, 0x2a, 0x86, 0xc8, 0x42,
	0x22, 0x2c, 0x41, 0x2a, 0x1f, 0xa1, 0x5d, 0x2a, 0x81, 0xa8, 0xdc, 0x01, 0x56, 0x37, 0x18, 0x1a,
	0x89, 0x38, 0x28, 0x76, 0x16, 0x26, 0x3e, 0x3a, 0xb2, 0x9d, 0x10, 0x17, 0xc4, 0x12, 0xdd, 0xff,
	0x7c, 0x77, 0xbf, 0x7b, 0x09, 0x9c, 0x16, 0x07, 0xae, 0x6f, 0xcc, 0x27, 0x7f, 0x6f, 0x6a, 0x5d,
	0x13, 0x6c, 0x6c, 0xfa, 0x00, 0x93, 0x55, 0x23, 0xb8, 0xae, 0x1b, 0x32, 0x87, 0xa8, 0x55, 0xa2,
	0xd9, 0xac, 0x93, 0x20, 0x0d, 0xb2, 0x98, 0x75, 0x8a, 0x24, 0x30, 0xa9, 0x44, 0xb5, 0x17, 0x8d,
	0x4a, 0xc2, 0x14, 0x65, 0x31, 0xeb, 0x25, 0x21, 0x80, 0x25, 0xaf, 0x44, 0x82, 0x6c, 0xbc, 0xb5,
	0xe9, 0x16, 0xa6, 0xab, 0x03, 0xd7, 0x1b, 0xf9, 0x52, 0xff, 0x59, 0xb1, 0xcf, 0x0b, 0x87, 0x3c,
	0x9f, 0x82, 0x8e, 0x28, 0x34, 0x77, 0x15, 0xef, 0x4a, 0xa5, 0x09, 0x05, 0xfc, 0x56, 0x2a, 0x9d,
	0x04, 0x29, 0xca, 0x66, 0xcb, 0x93, 0xdc, 0xce, 0xd3, 0xf3, 0x98, 0x7d, 0xa3, 0x6b, 0xc0, 0x5b,
	0xfe, 0x2a, 0xc8, 0x19, 0x20, 0xd9, 0x56, 0x16, 0x3d, 0x66, 0xc6, 0x34, 0x5c, 0x55, 0x7e, 0x38,
	0xee, 0x98, 0x59, 0xdb, 0xeb, 0x11, 0xf9, 0x3d, 0xd2, 0x47, 0x98, 0xed, 0x84, 0x7c, 0xbe, 0x17,
	0x4a, 0x99, 0x62, 0x73, 0x88, 0x0c, 0x6b, 0x18, 0xc5, 0x29, 0x2f, 0x3d, 0xfc, 0xb9, 0xb4, 0xa2,
	0x96, 0x5a, 0x48, 0xdd, 0xd5, 0xed, 0x25, 0x7d, 0x82, 0x68, 0xa7, 0xb9, 0x6e, 0x95, 0x89, 0x51,
	0x6d, 0x51, 0x08, 0xa5, 0x6c, 0xd1, 0x29, 0xeb, 0xa5, 0x47, 0x0b, 0x8f, 0x68, 0x17, 0x10, 0x77,
	0x0d, 0x7d, 0xf7, 0x3b, 0x38, 0x96, 0x9f, 0x01, 0x60, 0xb3, 0x0b, 0x72, 0x05, 0x91, 0x3d, 0xaa,
	0x20, 0xff, 0xbb, 0x0d, 0xb9, 0x13, 0x2f, 0xfe, 0x39, 0xe9, 0xf8, 0x74, 0x44, 0xae, 0x01, 0x9b,
	0x21, 0xc9, 0x79, 0xe7, 0x1f, 0x06, 0xfe, 0x15, 0x7a, 0x09, 0xd8, 0x5e, 0x00, 0x9c, 0xdf, 0x6c,
	0x78, 0xe1, 0xed, 0xdf, 0xbc, 0xd1, 0xd1, 0x3e, 0xb2, 0xff, 0xd6, 0xed, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xba, 0x48, 0x69, 0xe0, 0x6e, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: tech.cloudzen/tests/cz_rpc/server/proto/greeter.proto
// DO NOT EDIT!

/*
Package greeter is a generated protocol buffer package.

It is generated from these files:
	tech.cloudzen/tests/cz_rpc/server/proto/greeter.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	NonParamRequest
	NonParamResponse
	CountResponse
*/
package greeter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ltime int64  `protobuf:"varint,3,opt,name=ltime" json:"ltime,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloResponse struct {
	Greeting string `protobuf:"bytes,2,opt,name=greeting" json:"greeting,omitempty"`
	Ltime    int64  `protobuf:"varint,4,opt,name=ltime" json:"ltime,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NonParamRequest struct {
}

func (m *NonParamRequest) Reset()                    { *m = NonParamRequest{} }
func (m *NonParamRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamRequest) ProtoMessage()               {}
func (*NonParamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NonParamResponse struct {
}

func (m *NonParamResponse) Reset()                    { *m = NonParamResponse{} }
func (m *NonParamResponse) String() string            { return proto.CompactTextString(m) }
func (*NonParamResponse) ProtoMessage()               {}
func (*NonParamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CountResponse struct {
	Num int64 `protobuf:"varint,5,opt,name=num" json:"num,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "HelloResponse")
	proto.RegisterType((*NonParamRequest)(nil), "NonParamRequest")
	proto.RegisterType((*NonParamResponse)(nil), "NonParamResponse")
	proto.RegisterType((*CountResponse)(nil), "CountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Greeter service

type GreeterClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
	Count(ctx context.Context, in *NonParamRequest, opts ...client.CallOption) (*CountResponse, error)
	Clear(ctx context.Context, in *NonParamRequest, opts ...client.CallOption) (*NonParamResponse, error)
}

type greeterClient struct {
	c           client.Client
	serviceName string
}

func NewGreeterClient(serviceName string, c client.Client) GreeterClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "greeter"
	}
	return &greeterClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *greeterClient) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Greeter.Hello", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Count(ctx context.Context, in *NonParamRequest, opts ...client.CallOption) (*CountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Greeter.Count", in)
	out := new(CountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Clear(ctx context.Context, in *NonParamRequest, opts ...client.CallOption) (*NonParamResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Greeter.Clear", in)
	out := new(NonParamResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterHandler interface {
	Hello(context.Context, *HelloRequest, *HelloResponse) error
	Count(context.Context, *NonParamRequest, *CountResponse) error
	Clear(context.Context, *NonParamRequest, *NonParamResponse) error
}

func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Greeter{hdlr}, opts...))
}

type Greeter struct {
	GreeterHandler
}

func (h *Greeter) Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.GreeterHandler.Hello(ctx, in, out)
}

func (h *Greeter) Count(ctx context.Context, in *NonParamRequest, out *CountResponse) error {
	return h.GreeterHandler.Count(ctx, in, out)
}

func (h *Greeter) Clear(ctx context.Context, in *NonParamRequest, out *NonParamResponse) error {
	return h.GreeterHandler.Clear(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xb7, 0x76, 0xeb, 0x9f, 0xc1, 0x6a, 0x77, 0xf0, 0x50, 0xf6, 0xa4, 0x39, 0x2d, 0x08,
	0x09, 0x28, 0x82, 0x57, 0xf1, 0xa0, 0x27, 0x91, 0x7e, 0x01, 0xa9, 0x75, 0x58, 0x17, 0xd2, 0xa4,
	0x26, 0xa9, 0x87, 0xfd, 0x14, 0x7e, 0x64, 0xe3, 0x74, 0xd9, 0x3f, 0xea, 0x2d, 0x33, 0xbc, 0xf7,
	0x7b, 0x6f, 0x02, 0x37, 0x81, 0x9a, 0x77, 0xd9, 0x68, 0xdb, 0xbf, 0x2d, 0xc9, 0xa8, 0x40, 0x3e,
	0x78, 0xd5, 0x2c, 0x5f, 0x5c, 0xd7, 0x28, 0x4f, 0xee, 0x93, 0x9c, 0xea, 0x9c, 0x0d, 0x56, 0xcd,
	0x1d, 0x51, 0x20, 0x27, 0x79, 0x12, 0xb7, 0x70, 0xfc, 0x48, 0x5a, 0xdb, 0x8a, 0x3e, 0xfa, 0x68,
	0x41, 0x84, 0xb1, 0xa9, 0x5b, 0x2a, 0x93, 0xf3, 0x64, 0x76, 0x54, 0xf1, 0x1b, 0xcf, 0x20, 0xd3,
	0x61, 0x11, 0x97, 0x69, 0x5c, 0xa6, 0xd5, 0x30, 0x88, 0x3b, 0xc8, 0x57, 0x4e, 0xdf, 0x59, 0xe3,
	0x09, 0xa7, 0x70, 0xc8, 0xec, 0x85, 0x99, 0x97, 0x7b, 0x6c, 0x5f, 0xcf, 0x1b, 0xc4, 0x78, 0x1b,
	0x31, 0x81, 0xd3, 0x27, 0x6b, 0x9e, 0x6b, 0x57, 0xb7, 0xab, 0x7c, 0x81, 0x50, 0x6c, 0x56, 0x03,
	0x58, 0x5c, 0x40, 0x7e, 0x6f, 0x7b, 0x13, 0xd6, 0x49, 0x05, 0xa4, 0xa6, 0x6f, 0xcb, 0x8c, 0x59,
	0x3f, 0xcf, 0xab, 0xaf, 0x04, 0x0e, 0x1e, 0x86, 0xc3, 0x70, 0x06, 0x19, 0x17, 0xc3, 0x5c, 0x6e,
	0x9f, 0x36, 0x3d, 0x91, 0x3b, 0x7d, 0xc5, 0x08, 0x2f, 0x21, 0x63, 0x30, 0x16, 0xf2, 0x57, 0x8f,
	0x28, 0xde, 0x89, 0x8c, 0x62, 0x19, 0xc5, 0x9a, 0x6a, 0xf7, 0x8f, 0x78, 0x22, 0xff, 0x74, 0x1e,
	0xbd, 0xee, 0xf3, 0x07, 0x5f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x3b, 0xd3, 0xc7, 0x99,
	0x01, 0x00, 0x00,
}

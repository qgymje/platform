// Code generated by protoc-gen-go.
// source: gamevm.proto
// DO NOT EDIT!

/*
Package czs is a generated protocol buffer package.

It is generated from these files:
	gamevm.proto

It has these top-level messages:
	AgentRequest
	CzsReply
*/
package czs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AgentRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *AgentRequest) Reset()                    { *m = AgentRequest{} }
func (m *AgentRequest) String() string            { return proto.CompactTextString(m) }
func (*AgentRequest) ProtoMessage()               {}
func (*AgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CzsReply struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *CzsReply) Reset()                    { *m = CzsReply{} }
func (m *CzsReply) String() string            { return proto.CompactTextString(m) }
func (*CzsReply) ProtoMessage()               {}
func (*CzsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*AgentRequest)(nil), "czs.AgentRequest")
	proto.RegisterType((*CzsReply)(nil), "czs.CzsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for HeartBeat service

type HeartBeatClient interface {
	NotifyAlive(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*CzsReply, error)
}

type heartBeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartBeatClient(cc *grpc.ClientConn) HeartBeatClient {
	return &heartBeatClient{cc}
}

func (c *heartBeatClient) NotifyAlive(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*CzsReply, error) {
	out := new(CzsReply)
	err := grpc.Invoke(ctx, "/czs.HeartBeat/NotifyAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HeartBeat service

type HeartBeatServer interface {
	NotifyAlive(context.Context, *AgentRequest) (*CzsReply, error)
}

func RegisterHeartBeatServer(s *grpc.Server, srv HeartBeatServer) {
	s.RegisterService(&_HeartBeat_serviceDesc, srv)
}

func _HeartBeat_NotifyAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartBeatServer).NotifyAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/czs.HeartBeat/NotifyAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartBeatServer).NotifyAlive(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeartBeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "czs.HeartBeat",
	HandlerType: (*HeartBeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAlive",
			Handler:    _HeartBeat_NotifyAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("gamevm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4f, 0xcc, 0x4d,
	0x2d, 0xcb, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xae, 0x2a, 0x56, 0x52, 0xe0,
	0xe2, 0x71, 0x4c, 0x4f, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0,
	0x62, 0xce, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x4c, 0xb8,
	0x38, 0x9c, 0xab, 0x8a, 0x83, 0x52, 0x0b, 0x72, 0x2a, 0x31, 0x65, 0x85, 0xc4, 0xb8, 0xd8, 0x8a,
	0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x24, 0x98, 0xc0, 0x82, 0x50, 0x9e, 0x91, 0x1d, 0x17, 0xa7, 0x47,
	0x6a, 0x62, 0x51, 0x89, 0x53, 0x6a, 0x62, 0x89, 0x90, 0x21, 0x17, 0xb7, 0x5f, 0x7e, 0x49, 0x66,
	0x5a, 0xa5, 0x63, 0x4e, 0x66, 0x59, 0xaa, 0x90, 0xa0, 0x5e, 0x72, 0x55, 0xb1, 0x1e, 0xb2, 0xb5,
	0x52, 0xbc, 0x60, 0x21, 0x98, 0x3d, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x37, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x13, 0x4b, 0x83, 0x39, 0xb3, 0x00, 0x00, 0x00,
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamevm.proto

#ifndef PROTOBUF_gamevm_2eproto__INCLUDED
#define PROTOBUF_gamevm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gamevm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gamevm_2eproto();
void protobuf_AssignDesc_gamevm_2eproto();
void protobuf_ShutdownFile_gamevm_2eproto();

class GameVMAddress;

// ===================================================================

class GameVMAddress : public ::google::protobuf::Message {
 public:
  GameVMAddress();
  virtual ~GameVMAddress();

  GameVMAddress(const GameVMAddress& from);

  inline GameVMAddress& operator=(const GameVMAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameVMAddress& default_instance();

  void Swap(GameVMAddress* other);

  // implements Message ----------------------------------------------

  GameVMAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameVMAddress& from);
  void MergeFrom(const GameVMAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline const ::std::string& game_id() const;
  inline void set_game_id(const ::std::string& value);
  inline void set_game_id(const char* value);
  inline void set_game_id(const char* value, size_t size);
  inline ::std::string* mutable_game_id();
  inline ::std::string* release_game_id();
  inline void set_allocated_game_id(::std::string* game_id);

  // required string user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required string salt = 3;
  inline bool has_salt() const;
  inline void clear_salt();
  static const int kSaltFieldNumber = 3;
  inline const ::std::string& salt() const;
  inline void set_salt(const ::std::string& value);
  inline void set_salt(const char* value);
  inline void set_salt(const char* value, size_t size);
  inline ::std::string* mutable_salt();
  inline ::std::string* release_salt();
  inline void set_allocated_salt(::std::string* salt);

  // required string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // required uint32 ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gamevm.GameVMAddress)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_salt();
  inline void clear_has_salt();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* game_id_;
  ::std::string* user_id_;
  ::std::string* salt_;
  ::std::string* sign_;
  ::google::protobuf::uint32 ip_;
  friend void  protobuf_AddDesc_gamevm_2eproto();
  friend void protobuf_AssignDesc_gamevm_2eproto();
  friend void protobuf_ShutdownFile_gamevm_2eproto();

  void InitAsDefaultInstance();
  static GameVMAddress* default_instance_;
};
// ===================================================================


// ===================================================================

// GameVMAddress

// required string game_id = 1;
inline bool GameVMAddress::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameVMAddress::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameVMAddress::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameVMAddress::clear_game_id() {
  if (game_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_->clear();
  }
  clear_has_game_id();
}
inline const ::std::string& GameVMAddress::game_id() const {
  // @@protoc_insertion_point(field_get:gamevm.GameVMAddress.game_id)
  return *game_id_;
}
inline void GameVMAddress::set_game_id(const ::std::string& value) {
  set_has_game_id();
  if (game_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(value);
  // @@protoc_insertion_point(field_set:gamevm.GameVMAddress.game_id)
}
inline void GameVMAddress::set_game_id(const char* value) {
  set_has_game_id();
  if (game_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamevm.GameVMAddress.game_id)
}
inline void GameVMAddress::set_game_id(const char* value, size_t size) {
  set_has_game_id();
  if (game_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamevm.GameVMAddress.game_id)
}
inline ::std::string* GameVMAddress::mutable_game_id() {
  set_has_game_id();
  if (game_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamevm.GameVMAddress.game_id)
  return game_id_;
}
inline ::std::string* GameVMAddress::release_game_id() {
  clear_has_game_id();
  if (game_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_id_;
    game_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameVMAddress::set_allocated_game_id(::std::string* game_id) {
  if (game_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_id_;
  }
  if (game_id) {
    set_has_game_id();
    game_id_ = game_id;
  } else {
    clear_has_game_id();
    game_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamevm.GameVMAddress.game_id)
}

// required string user_id = 2;
inline bool GameVMAddress::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameVMAddress::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameVMAddress::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameVMAddress::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& GameVMAddress::user_id() const {
  // @@protoc_insertion_point(field_get:gamevm.GameVMAddress.user_id)
  return *user_id_;
}
inline void GameVMAddress::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:gamevm.GameVMAddress.user_id)
}
inline void GameVMAddress::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamevm.GameVMAddress.user_id)
}
inline void GameVMAddress::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamevm.GameVMAddress.user_id)
}
inline ::std::string* GameVMAddress::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamevm.GameVMAddress.user_id)
  return user_id_;
}
inline ::std::string* GameVMAddress::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameVMAddress::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamevm.GameVMAddress.user_id)
}

// required string salt = 3;
inline bool GameVMAddress::has_salt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameVMAddress::set_has_salt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameVMAddress::clear_has_salt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameVMAddress::clear_salt() {
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_->clear();
  }
  clear_has_salt();
}
inline const ::std::string& GameVMAddress::salt() const {
  // @@protoc_insertion_point(field_get:gamevm.GameVMAddress.salt)
  return *salt_;
}
inline void GameVMAddress::set_salt(const ::std::string& value) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  salt_->assign(value);
  // @@protoc_insertion_point(field_set:gamevm.GameVMAddress.salt)
}
inline void GameVMAddress::set_salt(const char* value) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  salt_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamevm.GameVMAddress.salt)
}
inline void GameVMAddress::set_salt(const char* value, size_t size) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  salt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamevm.GameVMAddress.salt)
}
inline ::std::string* GameVMAddress::mutable_salt() {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    salt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamevm.GameVMAddress.salt)
  return salt_;
}
inline ::std::string* GameVMAddress::release_salt() {
  clear_has_salt();
  if (salt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = salt_;
    salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameVMAddress::set_allocated_salt(::std::string* salt) {
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete salt_;
  }
  if (salt) {
    set_has_salt();
    salt_ = salt;
  } else {
    clear_has_salt();
    salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamevm.GameVMAddress.salt)
}

// required string sign = 4;
inline bool GameVMAddress::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameVMAddress::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameVMAddress::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameVMAddress::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& GameVMAddress::sign() const {
  // @@protoc_insertion_point(field_get:gamevm.GameVMAddress.sign)
  return *sign_;
}
inline void GameVMAddress::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:gamevm.GameVMAddress.sign)
}
inline void GameVMAddress::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamevm.GameVMAddress.sign)
}
inline void GameVMAddress::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamevm.GameVMAddress.sign)
}
inline ::std::string* GameVMAddress::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamevm.GameVMAddress.sign)
  return sign_;
}
inline ::std::string* GameVMAddress::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameVMAddress::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamevm.GameVMAddress.sign)
}

// required uint32 ip = 5;
inline bool GameVMAddress::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameVMAddress::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameVMAddress::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameVMAddress::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 GameVMAddress::ip() const {
  // @@protoc_insertion_point(field_get:gamevm.GameVMAddress.ip)
  return ip_;
}
inline void GameVMAddress::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:gamevm.GameVMAddress.ip)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamevm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gamevm_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamevm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gamevm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamevm {

namespace {

const ::google::protobuf::Descriptor* GameVMAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameVMAddress_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gamevm_2eproto() {
  protobuf_AddDesc_gamevm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gamevm.proto");
  GOOGLE_CHECK(file != NULL);
  GameVMAddress_descriptor_ = file->message_type(0);
  static const int GameVMAddress_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, ip_),
  };
  GameVMAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameVMAddress_descriptor_,
      GameVMAddress::default_instance_,
      GameVMAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVMAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameVMAddress));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gamevm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameVMAddress_descriptor_, &GameVMAddress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gamevm_2eproto() {
  delete GameVMAddress::default_instance_;
  delete GameVMAddress_reflection_;
}

void protobuf_AddDesc_gamevm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014gamevm.proto\022\006gamevm\"Y\n\rGameVMAddress\022"
    "\017\n\007game_id\030\001 \002(\t\022\017\n\007user_id\030\002 \002(\t\022\014\n\004sal"
    "t\030\003 \002(\t\022\014\n\004sign\030\004 \002(\t\022\n\n\002ip\030\005 \002(\r", 113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gamevm.proto", &protobuf_RegisterTypes);
  GameVMAddress::default_instance_ = new GameVMAddress();
  GameVMAddress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gamevm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gamevm_2eproto {
  StaticDescriptorInitializer_gamevm_2eproto() {
    protobuf_AddDesc_gamevm_2eproto();
  }
} static_descriptor_initializer_gamevm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameVMAddress::kGameIdFieldNumber;
const int GameVMAddress::kUserIdFieldNumber;
const int GameVMAddress::kSaltFieldNumber;
const int GameVMAddress::kSignFieldNumber;
const int GameVMAddress::kIpFieldNumber;
#endif  // !_MSC_VER

GameVMAddress::GameVMAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamevm.GameVMAddress)
}

void GameVMAddress::InitAsDefaultInstance() {
}

GameVMAddress::GameVMAddress(const GameVMAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamevm.GameVMAddress)
}

void GameVMAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameVMAddress::~GameVMAddress() {
  // @@protoc_insertion_point(destructor:gamevm.GameVMAddress)
  SharedDtor();
}

void GameVMAddress::SharedDtor() {
  if (game_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_id_;
  }
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete salt_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void GameVMAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameVMAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameVMAddress_descriptor_;
}

const GameVMAddress& GameVMAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamevm_2eproto();
  return *default_instance_;
}

GameVMAddress* GameVMAddress::default_instance_ = NULL;

GameVMAddress* GameVMAddress::New() const {
  return new GameVMAddress;
}

void GameVMAddress::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_game_id()) {
      if (game_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_id_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        salt_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameVMAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamevm.GameVMAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string game_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_id().data(), this->game_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_salt;
        break;
      }

      // required string salt = 3;
      case 3: {
        if (tag == 26) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->salt().data(), this->salt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "salt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // required string sign = 4;
      case 4: {
        if (tag == 34) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ip;
        break;
      }

      // required uint32 ip = 5;
      case 5: {
        if (tag == 40) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamevm.GameVMAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamevm.GameVMAddress)
  return false;
#undef DO_
}

void GameVMAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamevm.GameVMAddress)
  // required string game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_id(), output);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // required string salt = 3;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->salt(), output);
  }

  // required string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign(), output);
  }

  // required uint32 ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamevm.GameVMAddress)
}

::google::protobuf::uint8* GameVMAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamevm.GameVMAddress)
  // required string game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_id(), target);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // required string salt = 3;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->salt(), target);
  }

  // required string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // required uint32 ip = 5;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamevm.GameVMAddress)
  return target;
}

int GameVMAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_id());
    }

    // required string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string salt = 3;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->salt());
    }

    // required string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // required uint32 ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameVMAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameVMAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameVMAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameVMAddress::MergeFrom(const GameVMAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_salt()) {
      set_salt(from.salt());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameVMAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameVMAddress::CopyFrom(const GameVMAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameVMAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GameVMAddress::Swap(GameVMAddress* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(salt_, other->salt_);
    std::swap(sign_, other->sign_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameVMAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameVMAddress_descriptor_;
  metadata.reflection = GameVMAddress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamevm

// @@protoc_insertion_point(global_scope)
